{-# LANGUAGE QuasiQuotes #-}

import           Data.List
import           Data.List.Split
import           Data.Ord
import           Data.Char
import           Data.Maybe
import           Debug.Trace
import           Text.Regex.PCRE
import           Data.Array
import           Data.Map        (Map)
import qualified Data.Map        as Map
import           Data.Set        (Set)
import qualified Data.Set        as Set
import           Text.RawString.QQ (r)
import Data.Bits

main = readFile "in" >>= print . process

test = tail [r|
1
2
3
2024
|]

res = [0,0,8,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,2,0,0,2,0,0,0,0,0,0,6,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,4,0,0,0,0,5,8,7,0,0,0,3,5,9,0,4,0,0,0,0,9,0,9,8,0,0,0,0,4,0,0,0,7,5,4,0 ,0,7,0,0,0,0,3,0,0,3,0,0,0,0,0,5,4,0,9,0,0,0,0,0,3,0,0,6,0,0,4,0,0,0,8,2,8,8,8,6,0,0,0,0,0,0,0,0,9,0,6,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,7,0,0,4,0,0,9,0,0,9,0,0,0 ,0,5,4,0,0,0,0,0,0,0,0,0,0,0,7,2,6,0,5,0,0,9,0,0,0,0,0,0,7,0,0,0,9,0,6,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,5,0,7,9,0,0,0,0,0,0,0,0,0,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,8,0,0,0,8,0,0,0,0,3,0,5,0,0,0,0,3,0,0,0,0,0,0,8,0,7,0,7 ,0,0,0,4,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,9,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,7,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,2,0,5,0,6,0,0,0,0,0,0,4,0,4,0,0,0,0,0,0,4,0,0,6,0,0,0,0,0,0,8,0,0,0,9,0,0,8,0,6,0,3,0,3,0,0,5,0,3 ,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,2,0,0,0,3,0,0,0,0,9,0,0,0,5,0,0,7,0,0,9,0,0,0,0,0,0,4,5,3,6,0,7,0,0,0,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,5,7,0,0,5,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,0,0,0,0,0,0,0,0,0,0 ,0,0,0,5,2,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,9,0,0,0,4,0,3,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,7,0,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,8,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4 ,6,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,9,7,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,8,0,0,8,0,0,9,0,0,0,4,0,8,0,0,0,2,0,0,6,0,7,4,7,9,0,0,0,0,0,0,4,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4 ,9,0,0,0,0,0,5,9,0,0,4,6,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,4,0,0,0,0,5,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,4,7,0,0,0,5,8,7,0,0,3,0,0,0,0,0,0,2,0,0,0,6,4,2,0,5,0,0,5,9,0,0,0,0 ,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,2,0,0,3,0,5,0,0,2,3,0,0,0,0,8,4,0,0,0,0,0,0,2,0,0,3,0,0,4,6,0,0,0,5,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,3,0,0,0,7,7,0,0,2,0,7,9,0,0,0,8,0,0,0,0,0,0,3,0,0,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,9,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,2,0,0 ,4,0,0,0,0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,2,0,0,6,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,9,0,9,7,8,0,0,0,7,4,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,2,0,6,0,8,0,0 ,0,0,0,0,3,0,0,7,0,0,9,0,0,8,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,2,0,0,0,0,0,5,8,0,0,3,0,0,8,0,0,0,0,0,0,0,6,0,0,0,0,0,0,7,0,0,0,0,0,0,0,9,0,0,0,0,6,0,0,0,0,0,3,3,6,0,7,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,2,0,7,8,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,3,0,6,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,8,0,0,6 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,6,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,8,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,7,0,5,0 ,0,0,5,0,9,9,0,2,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,9,5,0,0,0,2,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,4,2,9,9,0,0,0,0,0,6,0,0,3,0,0,0,0,7,0,0,0,0,0,2,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,5,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0]

process = maximizeSeq . map (cached Map.empty . preceeders [] . take 2000 . diffs . read) . lines
-- process _ = 69

maximizeSeq caches = maximum $ map (\seq -> sum $ map (numForSeq seq) caches) seqs

numForSeq seq cache  = fromMaybe 0 $ Map.lookup seq cache

seqs :: [(Int, Int, Int, Int)]
seqs = [(a,b,c,d) | a <- [-9..9], b <- [-9..9], c <- [-9..9], d <- [-9..9]]

cached cache ((x,preceeds):rest) = cached (Map.insertWith (\_ old -> old) preceeds x cache) rest
cached cache [] = cache

preceeders acc (a:b:c:d:rest) = preceeders ((fst d, (snd a, snd b, snd c, snd d)):acc) (b:c:d:rest)
preceeders acc _ = acc

diffs start = zipWith (\prev next -> (prev, prev - next)) (tail $ digits start) (digits start)
digits = map (`mod` 10) . secrets
secrets = iterate secret

secret :: Int -> Int
secret s0 = s3
  where s1 = (s0 `xor` (s0 `shiftL` 6 )) .&. 0xFFFFFF
        s2 = (s1 `xor` (s1 `shiftR` 5 )) .&. 0xFFFFFF
        s3 = (s2 `xor` (s2 `shiftL` 11)) .&. 0xFFFFFF

